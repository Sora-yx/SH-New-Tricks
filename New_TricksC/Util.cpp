#include "pch.h"

void COLLIFv(C_COLLI* param_1)
{
	param_1->info = 0x0;
	param_1->flag = 0;
	param_1->nbHit = 0;
	param_1->nbInfo = 0;
	param_1->strength = 1;
	param_1->vitality = 1;
	param_1->field_7C.y = 0.0f;
}

void ObjMoveOnGroundFv(OBJ_MoveOnGround* obj)
{
	obj->spdObject.z = 0.0f;
	obj->spdObject.y = 0.0f;
	obj->spdObject.x = 0.0f;
	obj->cCheck = 1;
	obj->bound_mode = OBJ_MOG_BOUND_MODE_REAL;
	obj->bound_coef = 0.75f;
	obj->flagMOG = obj->flagMOG & 0xf0ff;
	obj->flagMOG = obj->flagMOG & 0xfff0;
	obj->lattr_Ignore = 0;
}


void nullsub()
{

}


float njSinCosTbl[1025] = {
	0.0f, 0.001534f, 0.0030680001f, 0.0046020001f, 0.0061360002f, 0.0076700002f, 0.0092040002f, 0.010738f, 0.012272f, 0.013805f, 0.015339f, 0.016873f, 0.018407f, 0.01994f, 0.021474f, 0.023008f, 0.024541f, 0.026075f, 0.027608f, 0.029142f, 0.030675f, 0.032207999f, 0.033741001f, 0.035273999f, 0.036807001f, 0.038339999f, 0.039873f, 0.041405998f, 0.042938001f, 0.044470999f, 0.046002999f, 0.047534999f, 0.049068f, 0.0506f, 0.052131999f, 0.053663999f, 0.055195f, 0.056727f, 0.058258001f, 0.05979f, 0.061321001f, 0.062852003f, 0.064383f, 0.065912999f, 0.067443997f,
	0.068974003f, 0.070505001f, 0.072035f, 0.073564999f, 0.075094f, 0.076623999f, 0.078152999f, 0.079682f, 0.081211001f, 0.082740001f, 0.084269002f, 0.085796997f, 0.087325998f, 0.088854f, 0.090380996f, 0.091908999f, 0.093436003f, 0.094962999f, 0.096490003f, 0.098017f, 0.099544004f, 0.10107f, 0.102596f, 0.104122f, 0.105647f, 0.107172f, 0.108697f, 0.110222f, 0.111747f, 0.113271f, 0.114795f, 0.116319f, 0.117842f, 0.119365f, 0.120888f, 0.122411f, 0.123933f, 0.12545501f, 0.126977f, 0.128498f, 0.13001899f, 0.13154f, 0.13306101f, 0.134581f, 0.13610099f,
	0.13762f, 0.139139f, 0.14065801f, 0.142177f, 0.143695f, 0.14521299f, 0.14673001f, 0.148248f, 0.149765f, 0.151281f, 0.152797f, 0.154313f, 0.155828f, 0.157343f, 0.158858f, 0.160372f, 0.16188601f, 0.16339999f, 0.164913f, 0.166426f, 0.16793799f, 0.16945f, 0.17096201f, 0.172473f, 0.17398401f, 0.175494f, 0.17700399f, 0.178514f, 0.180023f, 0.181532f, 0.18303999f, 0.18454801f, 0.186055f, 0.187562f, 0.189069f, 0.190575f, 0.19208001f, 0.19358601f, 0.19509f, 0.196595f, 0.198098f, 0.19960199f, 0.201105f, 0.20260701f, 0.204109f, 0.20561001f, 0.207111f, 0.20861199f,
	0.21011201f, 0.211611f, 0.21311f, 0.214609f, 0.216107f, 0.217604f, 0.219101f, 0.220598f, 0.222094f, 0.223589f, 0.22508401f, 0.226578f, 0.228072f, 0.22956499f, 0.231058f, 0.23255f, 0.234042f, 0.235533f, 0.23702399f, 0.23851401f, 0.240003f, 0.241492f, 0.24298f, 0.244468f, 0.24595501f, 0.24744201f, 0.248928f, 0.250413f, 0.25189799f, 0.253382f, 0.254866f, 0.256349f, 0.25783101f, 0.25931299f, 0.26079401f, 0.26227501f, 0.26375499f, 0.26523399f, 0.26671299f, 0.26819101f, 0.26966801f, 0.27114499f, 0.27262101f, 0.274097f, 0.275572f, 0.27704599f, 0.27851999f,
	0.279993f, 0.28146499f, 0.28293699f, 0.284408f, 0.285878f, 0.28734699f, 0.288816f, 0.29028499f, 0.29175201f, 0.293219f, 0.29468501f, 0.29615101f, 0.297616f, 0.29908001f, 0.30054301f, 0.30200601f, 0.30346799f, 0.30492899f, 0.30638999f, 0.30785f, 0.30930901f, 0.31076699f, 0.31222501f, 0.31368199f, 0.31513801f, 0.31659299f, 0.318048f, 0.319502f, 0.32095501f, 0.32240799f, 0.32385901f, 0.32530999f, 0.32675999f, 0.32821f, 0.329658f, 0.33110601f, 0.332553f, 0.33399999f, 0.33544499f, 0.33689001f, 0.33833399f, 0.33977699f, 0.34121901f, 0.34266099f,
	0.34410101f, 0.345541f, 0.34698001f, 0.34841901f, 0.34985599f, 0.351293f, 0.35272899f, 0.354164f, 0.355598f, 0.35703099f, 0.35846299f, 0.35989499f, 0.36132601f, 0.36275601f, 0.36418501f, 0.36561301f, 0.36704001f, 0.368467f, 0.369892f, 0.371317f, 0.37274101f, 0.37416399f, 0.375586f, 0.37700701f, 0.37842801f, 0.37984699f, 0.381266f, 0.38268301f, 0.38409999f, 0.38551599f, 0.386931f, 0.388345f, 0.38975799f, 0.39117f, 0.392582f, 0.39399201f, 0.395401f, 0.39681f, 0.39821801f, 0.39962399f, 0.40103f, 0.402435f, 0.40383801f, 0.40524101f, 0.406643f, 0.40804401f,
	0.409444f, 0.41084301f, 0.41224101f, 0.413638f, 0.415034f, 0.41643f, 0.417824f, 0.41921699f, 0.420609f, 0.42199999f, 0.42339f, 0.42478001f, 0.42616799f, 0.42755499f, 0.42894101f, 0.43032601f, 0.43171099f, 0.43309399f, 0.43447599f, 0.435857f, 0.43723699f, 0.43861601f, 0.43999401f, 0.44137099f, 0.442747f, 0.44412199f, 0.44549599f, 0.44686899f, 0.448241f, 0.44961101f, 0.45098099f, 0.45234999f, 0.45371699f, 0.455084f, 0.456449f, 0.45781299f, 0.45917699f, 0.46053901f, 0.4619f, 0.46325999f, 0.46461901f, 0.46597701f, 0.46733299f, 0.46868899f, 0.470043f,
	0.47139701f, 0.47274899f, 0.47409999f, 0.47545001f, 0.47679901f, 0.478147f, 0.47949401f, 0.48083901f, 0.48218399f, 0.483527f, 0.484869f, 0.48620999f, 0.48754999f, 0.48888901f, 0.49022701f, 0.49156299f, 0.49289799f, 0.494232f, 0.495565f, 0.49689701f, 0.49822801f, 0.49955699f, 0.50088501f, 0.50221199f, 0.50353801f, 0.50486302f, 0.50618702f, 0.50750899f, 0.50883001f, 0.51015002f, 0.51146901f, 0.51278597f, 0.514103f, 0.51541799f, 0.51673198f, 0.51804399f, 0.51935601f, 0.520666f, 0.52197498f, 0.523283f, 0.52459002f, 0.525895f, 0.52719897f, 0.52850199f,
	0.52980399f, 0.53110403f, 0.53240299f, 0.533701f, 0.534998f, 0.53629303f, 0.53758699f, 0.53887999f, 0.54017198f, 0.541462f, 0.54275101f, 0.54403901f, 0.54532498f, 0.54661f, 0.547894f, 0.54917699f, 0.55045801f, 0.55173802f, 0.55301702f, 0.55429399f, 0.55557001f, 0.55684501f, 0.558119f, 0.55939102f, 0.56066197f, 0.56193101f, 0.56319898f, 0.564466f, 0.565732f, 0.56699598f, 0.568259f, 0.56952101f, 0.57078099f, 0.57204002f, 0.57329702f, 0.57455301f, 0.57580799f, 0.57706201f, 0.57831401f, 0.57956499f, 0.580814f, 0.58206201f, 0.58330899f, 0.58455402f,
	0.58579803f, 0.58704001f, 0.58828199f, 0.58952099f, 0.59075999f, 0.59199703f, 0.59323198f, 0.59446698f, 0.59569901f, 0.59693098f, 0.59816098f, 0.59938902f, 0.60061598f, 0.60184199f, 0.60306698f, 0.60429001f, 0.60551101f, 0.606731f, 0.60794997f, 0.60916698f, 0.61038297f, 0.611597f, 0.61281002f, 0.61402202f, 0.61523199f, 0.61644f, 0.61764699f, 0.61885297f, 0.62005699f, 0.62125999f, 0.62246102f, 0.62366098f, 0.62485999f, 0.62605602f, 0.62725198f, 0.62844598f, 0.62963802f, 0.63082898f, 0.63201898f, 0.63320702f, 0.63439298f, 0.63557798f, 0.63676202f,
	0.63794398f, 0.63912398f, 0.64030302f, 0.64148098f, 0.64265698f, 0.64383203f, 0.64500499f, 0.64617598f, 0.64734602f, 0.64851397f, 0.64968097f, 0.65084702f, 0.65201098f, 0.65317303f, 0.65433401f, 0.65549302f, 0.65665102f, 0.65780699f, 0.658961f, 0.66011399f, 0.66126603f, 0.66241598f, 0.66356403f, 0.664711f, 0.665856f, 0.667f, 0.66814202f, 0.66928297f, 0.67042202f, 0.67155898f, 0.67269498f, 0.67382902f, 0.67496198f, 0.67609298f, 0.67722201f, 0.67834997f, 0.67947602f, 0.680601f, 0.68172401f, 0.68284601f, 0.68396503f, 0.68508399f, 0.68620002f,
	0.68731499f, 0.688429f, 0.68954098f, 0.690651f, 0.69175899f, 0.69286603f, 0.69397098f, 0.69507498f, 0.69617701f, 0.69727701f, 0.698376f, 0.69947302f, 0.70056897f, 0.70166302f, 0.70275497f, 0.70384502f, 0.704934f, 0.70602101f, 0.70710701f, 0.70819098f, 0.70927298f, 0.71035302f, 0.71143198f, 0.71250898f, 0.71358502f, 0.71465898f, 0.71573102f, 0.71680099f, 0.71787f, 0.71893698f, 0.72000301f, 0.721066f, 0.72212797f, 0.723189f, 0.72424698f, 0.72530401f, 0.72635901f, 0.727413f, 0.72846401f, 0.729514f, 0.73056298f, 0.73160899f, 0.73265398f, 0.733697f,
	0.73473901f, 0.73577899f, 0.736817f, 0.73785299f, 0.73888701f, 0.73992002f, 0.740951f, 0.74198002f, 0.74300802f, 0.74403399f, 0.745058f, 0.74607998f, 0.74710101f, 0.748119f, 0.74913597f, 0.75015199f, 0.75116497f, 0.752177f, 0.753187f, 0.75419497f, 0.75520098f, 0.75620598f, 0.757209f, 0.75821f, 0.75920898f, 0.760207f, 0.76120198f, 0.762196f, 0.763188f, 0.76417899f, 0.765167f, 0.76615399f, 0.76713902f, 0.76812202f, 0.76910299f, 0.77008301f, 0.771061f, 0.77203602f, 0.77301002f, 0.773983f, 0.77495301f, 0.775922f, 0.77688801f, 0.77785301f, 0.778817f,
	0.779778f, 0.78073698f, 0.78169501f, 0.78265101f, 0.78360498f, 0.78455698f, 0.78550702f, 0.78645498f, 0.78740197f, 0.78834599f, 0.789289f, 0.79022998f, 0.79116899f, 0.79210699f, 0.793042f, 0.793975f, 0.79490697f, 0.79583699f, 0.79676503f, 0.79769099f, 0.79861498f, 0.799537f, 0.80045801f, 0.80137599f, 0.802293f, 0.80320799f, 0.80412f, 0.805031f, 0.80593997f, 0.80684799f, 0.80775303f, 0.80865598f, 0.80955797f, 0.81045699f, 0.81135499f, 0.81225097f, 0.81314403f, 0.81403601f, 0.81492603f, 0.81581402f, 0.81670099f, 0.81758499f, 0.81846702f, 0.81934798f,
	0.82022601f, 0.82110202f, 0.82197702f, 0.82284999f, 0.82372099f, 0.82458901f, 0.82545602f, 0.82632101f, 0.82718402f, 0.82804501f, 0.82890397f, 0.82976103f, 0.830616f, 0.83147001f, 0.83232099f, 0.83317f, 0.83401799f, 0.83486301f, 0.835706f, 0.83654797f, 0.83738703f, 0.83822501f, 0.83906001f, 0.839894f, 0.840725f, 0.841555f, 0.84238303f, 0.84320801f, 0.84403199f, 0.844854f, 0.84567302f, 0.84649098f, 0.84730703f, 0.84811997f, 0.84893203f, 0.849742f, 0.85055f, 0.85135502f, 0.85215902f, 0.852961f, 0.85376f, 0.85455799f, 0.85535401f, 0.85614699f,
	0.85693902f, 0.85772902f, 0.85851598f, 0.85930198f, 0.86008501f, 0.86086702f, 0.861646f, 0.86242402f, 0.863199f, 0.86397302f, 0.86474401f, 0.86551398f, 0.86628097f, 0.867046f, 0.867809f, 0.86857098f, 0.86932999f, 0.87008703f, 0.87084198f, 0.87159503f, 0.87234598f, 0.87309498f, 0.873842f, 0.874587f, 0.87532902f, 0.87607002f, 0.876809f, 0.877545f, 0.87827998f, 0.87901199f, 0.87974298f, 0.88047099f, 0.88119698f, 0.88192099f, 0.88264298f, 0.88336301f, 0.88408101f, 0.88479698f, 0.88551098f, 0.88622302f, 0.88693202f, 0.88764f, 0.888345f, 0.88904798f,
	0.88975f, 0.89044899f, 0.891146f, 0.89184099f, 0.89253402f, 0.893224f, 0.89391297f, 0.89459902f, 0.895284f, 0.89596599f, 0.89664602f, 0.89732498f, 0.89800102f, 0.89867401f, 0.89934599f, 0.90001601f, 0.90068299f, 0.90134901f, 0.90201199f, 0.90267301f, 0.903332f, 0.90398902f, 0.90464401f, 0.90529698f, 0.90594703f, 0.906596f, 0.907242f, 0.90788603f, 0.90852797f, 0.909168f, 0.90980601f, 0.91044098f, 0.911075f, 0.91170597f, 0.91233498f, 0.91296202f, 0.91358697f, 0.91421002f, 0.91483003f, 0.91544902f, 0.91606498f, 0.91667902f, 0.91729099f, 0.91790098f,
	0.91850799f, 0.91911399f, 0.91971701f, 0.92031801f, 0.92091697f, 0.92151397f, 0.92210901f, 0.922701f, 0.92329103f, 0.92387998f, 0.924465f, 0.92504901f, 0.92563099f, 0.92620999f, 0.92678702f, 0.92736298f, 0.927935f, 0.92850602f, 0.929075f, 0.92964101f, 0.93020499f, 0.930767f, 0.93132699f, 0.93188399f, 0.93243998f, 0.93299299f, 0.93354398f, 0.934093f, 0.93463898f, 0.935184f, 0.93572599f, 0.93626601f, 0.93680298f, 0.93733901f, 0.93787199f, 0.93840402f, 0.938932f, 0.93945903f, 0.93998402f, 0.94050598f, 0.94102597f, 0.941544f, 0.94205999f, 0.94257301f,
	0.943084f, 0.94359303f, 0.94410002f, 0.94460499f, 0.94510698f, 0.94560701f, 0.946105f, 0.94660097f, 0.94709402f, 0.947586f, 0.948075f, 0.94856101f, 0.94904602f, 0.94952798f, 0.95000798f, 0.950486f, 0.95096201f, 0.95143503f, 0.95190603f, 0.95237499f, 0.952842f, 0.95330602f, 0.95376801f, 0.95422798f, 0.95468599f, 0.95514101f, 0.955594f, 0.95604497f, 0.95649397f, 0.95694f, 0.957385f, 0.95782602f, 0.95826602f, 0.95870298f, 0.95913899f, 0.959571f, 0.96000201f, 0.96043098f, 0.96085697f, 0.96127999f, 0.96170199f, 0.96212101f, 0.962538f, 0.96295297f,
	0.96336597f, 0.96377599f, 0.96418399f, 0.96459001f, 0.964993f, 0.96539402f, 0.96579301f, 0.96618998f, 0.96658403f, 0.96697599f, 0.96736598f, 0.96775401f, 0.96813899f, 0.96852201f, 0.96890301f, 0.96928102f, 0.969657f, 0.97003102f, 0.97040302f, 0.97077203f, 0.97113901f, 0.97150397f, 0.97186601f, 0.97222698f, 0.97258401f, 0.97294003f, 0.97329301f, 0.97364402f, 0.973993f, 0.97433901f, 0.974684f, 0.975025f, 0.97536498f, 0.97570199f, 0.97603703f, 0.97636998f, 0.97670001f, 0.97702801f, 0.97735399f, 0.97767699f, 0.97799802f, 0.97831702f, 0.978634f,
	0.978948f, 0.97926003f, 0.97956997f, 0.979877f, 0.98018199f, 0.98048502f, 0.98078501f, 0.98108298f, 0.98137897f, 0.981673f, 0.98196399f, 0.98225302f, 0.982539f, 0.98282403f, 0.983105f, 0.98338503f, 0.98366201f, 0.98393703f, 0.98421001f, 0.98448002f, 0.98474801f, 0.98501402f, 0.98527801f, 0.98553902f, 0.985798f, 0.986054f, 0.98630798f, 0.98655999f, 0.98680902f, 0.98705697f, 0.98730099f, 0.987544f, 0.98778403f, 0.98802203f, 0.988258f, 0.988491f, 0.98872203f, 0.98895001f, 0.98917699f, 0.98940003f, 0.989622f, 0.98984098f, 0.990058f, 0.990273f,
	0.99048501f, 0.990695f, 0.99090302f, 0.991108f, 0.99131101f, 0.99151099f, 0.99171001f, 0.99190599f, 0.99209899f, 0.99229097f, 0.99247998f, 0.99266601f, 0.99285001f, 0.99303198f, 0.99321198f, 0.99338901f, 0.99356401f, 0.99373698f, 0.99390697f, 0.994075f, 0.99423999f, 0.99440402f, 0.99456501f, 0.99472302f, 0.99487901f, 0.99503303f, 0.99518502f, 0.99533403f, 0.99548101f, 0.99562502f, 0.995767f, 0.99590701f, 0.99604499f, 0.99618f, 0.99631298f, 0.99644297f, 0.996571f, 0.99669701f, 0.99681997f, 0.99694097f, 0.99706f, 0.99717599f, 0.99729002f, 0.99740201f,
	0.99751103f, 0.99761802f, 0.99772298f, 0.99782503f, 0.99792498f, 0.99802297f, 0.99811798f, 0.99821103f, 0.99830198f, 0.99839002f, 0.99847603f, 0.998559f, 0.99864f, 0.99871898f, 0.99879497f, 0.99887002f, 0.998941f, 0.99901098f, 0.99907798f, 0.99914199f, 0.99920499f, 0.99926502f, 0.999322f, 0.99937803f, 0.99943101f, 0.99948102f, 0.999529f, 0.99957502f, 0.99961901f, 0.99966002f, 0.999699f, 0.999735f, 0.99976897f, 0.99980098f, 0.99983102f, 0.99985802f, 0.99988198f, 0.99990499f, 0.99992502f, 0.999942f, 0.99995798f, 0.99997097f, 0.99998099f, 0.99998897f,
	0.99999499f, 0.99999899f, 1.0f
};


float njCos(int n)
{
	int unit = (n >> 4) & 0x0FFF;
	int nib = n & 0x0F;
	int group = unit & 0x0C00;
	float result = 0;

	// If the angle lends between two values in the lookup table then interpolate.
	if (nib == 0)
	{
		float n1 = 0;
		float n2 = 0;

		switch (group)
		{
		case 0x0:
			n1 = njSinCosTbl[0x400 - unit];
			n2 = njSinCosTbl[0x400 - (unit + 1)];
			break;
		case 0x400:
			n1 = -njSinCosTbl[unit - 0x400];
			n2 = -njSinCosTbl[(unit + 1) - 0x400];
			break;
		case 0x800:
			n1 = -njSinCosTbl[0xC00 - unit];
			n2 = -njSinCosTbl[0xC00 - (unit + 1)];
			break;
		case 0xC00:
			n1 = njSinCosTbl[unit - 0xC00];
			n2 = njSinCosTbl[(unit + 1) - 0xC00];
			break;
		}

		result = n1 + (n2 - n1) * nib * 0.0625f;
	}
	else
	{
		switch (group)
		{
		case 0x0:
			return njSinCosTbl[0x400 - unit];
		case 0x400:
			return -njSinCosTbl[unit - 0x400];
		case 0x800:
			return -njSinCosTbl[0xC00 - unit];
		case 0xC00:
			return njSinCosTbl[unit - 0xC00];
		}
	}

	return result;
}


float njSin(int n)
{
	int unit = (n >> 4) & 0x0FFF;
	int nib = n & 0x0F;
	int group = unit & 0x0C00;
	float result = 0;

	// If the angle lends between two values in the lookup table then interpolate.
	if (nib != 0)
	{
		float n1 = 0;
		float n2 = 0;

		switch (group)
		{
		case 0:
			n1 = njSinCosTbl[unit];
			n2 = njSinCosTbl[unit + 1];
			break;
		case 0x400:
			n1 = njSinCosTbl[0x800 - unit];
			n2 = njSinCosTbl[0x800 - (unit + 1)];
			break;
		case 0x800:
			n1 = -njSinCosTbl[unit - 0x800];
			n2 = -njSinCosTbl[(unit + 1) - 0x800];
			break;
		case 0xC00:
			n1 = -njSinCosTbl[0x1000 - unit];
			n2 = -njSinCosTbl[0x1000 - (unit + 1)];
			break;
		}

		result = n1 + (n2 - n1) * nib * 0.0625f;
	}
	else
	{
		switch (group)
		{
		case 0:
			return njSinCosTbl[unit];
		case 0x400:
			return njSinCosTbl[0x800 - unit];
		case 0x800:
			return -njSinCosTbl[unit - 0x800];
		case 0xC00:
			return -njSinCosTbl[0x1000 - unit];
		}
	}

	return result;
}
